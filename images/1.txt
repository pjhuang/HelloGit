/*************************************************************
** ATOP version control information:                        **
** $Rev:: 234                   $:  Revision of last commit **
** $Author:: simonhuang         $:  Author of last commit   **
** $Date:: 2013-08-12 15:45:58 #$:  Date of last commit     **
**************************************************************/
/***************************************************************************
 *
 *  Copyright (C) 2003-2005 CCL, ITRI.  All Rights Reserved.
 *
 *  THIS IS AN UNPUBLISHED WORK WHICH CONTAINS CONFIDENTIAL INFORMATION
 *  FROM CCL, ITRI.  NO PART OF THIS WORK MAY BE USED IN ANY WAY WITHOUT
 *  THE PRIOR WRITTEN PERMISSION.  ANY UNAUTHORIZED USE COULD SUBJECT THE
 *  PERPETRATOR TO CRIMINAL AND CIVIL LIABILITY.
 *
 *  CCL, ITRI IS NOT RESPONSIBLE OR LIABLE FOR ANY DIRECT, INDIRECT,
 *  SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES THAT MAY RESULT FROM
 *  THE USE, OR INABILITY TO USE OF THIS WORK.  ANY EXPRESSED OR IMPLIED
 *  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 *  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *
 ***************************************************************************/
// Update
//[20130506][mantis 190][simonhuang] re-organize the layout of 'SMTP setting' page of Web-UI
// [20130618][mantis 149][simonhuang] refine the Web-UI and show the port ID as 'Module ID-Port ID' style
// [20130805][mantis 149][simonhuang] refine the Web-UI
// [20130808][mantis 251][MarkHsu] refine the Web-UI to let SMTP Settings work correct
// [20130808][mantis 252][simonhuang] complete the relay's function
// [20130812][mantis 259][simonhuang] refine the 'Warning Alert' related functions of Web-UI


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <syslog.h>
#include <netdb.h> /* for gethostbyname */
#include <sys/types.h> /* for open */
#include <sys/stat.h> /* for open */
#include <fcntl.h> /* for open */
#include <unistd.h>

#include "krndef.h"
#include "krntype.h"
#include "krnvlan.h"
#include "usrerr.h"
#include "usrflsh.h"
#include "usrportmask.h"
#include "usrtrk.h"
#include "usrvlan.h"
#include "webutil.h"
#include "vlan.h"
#include "usrsys.h"
#include "usrutil.h"


#define SYSLOG_WARNING          1
#define LOG_MAX_LINE            15000
#define LOG_BUF_LENGTH          512
#define ALRT_TEST_MAIL          "Send Test E-mail"
#define MAIL_TEMP_FILE          "/tmp/mailmessage"


static char **pbuf = NULL;
static int total_lines = 0;
static int relayAsserted = 0;


static void relay_log(void)
{
    FILE *fp;
    char buf[LOG_BUF_LENGTH];
    int i=0, j=0;
    char timestamp[16]; //1970/01/01
    char date[16]; //00:35:48 
    char uptime[16]; //up:00d00h35m48s
    int success_read=0;
   
    i = 0;
    if ((fp = fopen("/var/relay","r")) == NULL)
    {
        return;  
    }
    else 
    {
        while (!feof(fp)) 
        {  
            if (fgets(buf, sizeof(buf),fp) != NULL) 
            {
                success_read = sscanf(buf, "%s %s %s",  timestamp, date, uptime);
                if (success_read == 3)
                    i++;
            }
        }

        total_lines = i;
        fclose(fp);
    }
    
    if (total_lines > LOG_MAX_LINE || total_lines == 0)
    {
        return;
    }
    
    //allocate memory for pbuf[].
    if (pbuf==NULL) 
    {
        pbuf = malloc(sizeof(pbuf)*LOG_MAX_LINE);
        for (j = 0 ; j < LOG_MAX_LINE ; j++) 
        {
            pbuf[j] = malloc(LOG_BUF_LENGTH);
        }
    }
    
    if ((fp = fopen("/var/relay","r")) == NULL) 
    {
        //printf("cannot open %s to read\n", LOG_FILES_TMP_PATH);
        return;
    }   
    else
    {
        j = total_lines - 1;
        while (!feof(fp)) 
        {  
            if (fgets(buf, LOG_BUF_LENGTH,fp) != NULL) 
            {
                success_read = sscanf(buf, "%s %s %s", timestamp, date, uptime);
                if (success_read ==3) 
                {
                    memcpy(pbuf[j], buf, strlen(buf));
                    pbuf[j][strlen(buf)] = '\0'; //Ken add, fix old buffer string display.
                    j--;
                }
            }
        }
        fclose(fp);
    }
    
    for (j = 0 ; j < total_lines ; j++) 
    {
        char *p = pbuf[j];
        char *message = NULL;
        
        success_read = sscanf(p, "%s %s %s", timestamp, date, uptime);
        if (success_read == 3) 
        {
            message = pbuf[j];
            message = strstr(message, " ")+1;
            message = strstr(message, " ")+1;
            message = strstr(message, " ")+1;

            printf("    <td align=\"center\">%d/%d</td>\n", j + 1, total_lines);
            printf("    <td align=\"center\">%s</td>\n", timestamp);
            printf("    <td align=\"center\">%s</td>\n", date);
            printf("    <td align=\"center\">%s</td>\n", uptime);
            printf("    <td align=\"left\">%s</td>\n", message);
            printf("  </tr>\n");
        }
        //free( pbuf[j] );
    }
}


static int sendMail(char *email_addr, char *sender, char *alert_cond, int ethx, int wait_respond, unsigned char *new_config, unsigned char *old_config)
{
    char        buf[1024];
    char        user[MAX_MAIL_SERVER_ACCOUNT_LEN];
    char        passwd[MAX_MAIL_SERVER_PASSWORD_LEN];
    char        mail_server[MAX_MAIL_SERVER_NAME_LEN];
    char        subject[MAX_MAIL_SERVER_ACCOUNT_LEN];
    Tbool       bAuthEnable;
    char        mail_temp_file[64];
    time_t      ltime;
    struct tm   *Tm;
    int         fd;
    char        acIp[16];
    Tbool       bDhcp = Disable;
    Tuint32     ulIp = 0;
    Tuint32     ulNetmask = 0;
    TstFlshSysInfo stFlshSysInfo;

    U_FlshSysInfoGet(&stFlshSysInfo);
    acIp[0] = '\0';
    U_FlshSysGetDhcp(&bDhcp);
    
    if (bDhcp == False)
    {
        U_FlshSysGetIp(&ulIp, &ulNetmask);
    }
    else
    {
        U_SysGetIp(&ulIp, &ulNetmask);
    }
    
    ip_to_str(acIp, ulIp);
        
    ltime = time(NULL);
    Tm = localtime(&ltime);
    
#if 1
    memset(buf, 0, sizeof(buf));
    sprintf(buf,   "Alert Condition: %s \n", alert_cond);
    sprintf(buf,   "%s\n", buf);
    sprintf(buf,   "%sSender: %s\n", buf, sender);
    sprintf(buf,   "%sSystem Name: %s\n", buf, stFlshSysInfo.aucName);
    sprintf(buf,   "%sIP Address:%s\n", buf, acIp);
    sprintf(buf,   "%sWeb Page: http://%s\n", buf, acIp);
    sprintf(buf,   "%s\n", buf);
    sprintf(buf, "%sDate: %d/%02d/%02d\n", buf, Tm->tm_year+1900, Tm->tm_mon+1, Tm->tm_mday);
    sprintf(buf, "%sTime: %02d:%02d:%02d\n", buf, Tm->tm_hour, Tm->tm_min, Tm->tm_sec);
    //syslog(LOG_ALERT, "%s\n", buf);
    
    memset(mail_temp_file, 0, sizeof(mail_temp_file));
    sprintf(mail_temp_file, "%s.1", MAIL_TEMP_FILE);
    
    system("rm -rf /tmp/mailmessage.1");
    if ((fd = open(mail_temp_file, O_WRONLY | O_CREAT | O_TRUNC, S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH)) >= 0) 
    {
        if (write(fd, buf, strlen(buf)) != strlen(buf))
        {
            //return -1;
        }
        close(fd); // close file
    }
    else
    {
        //return -1;
    }
#endif

    memset(buf, 0, sizeof(buf));
    U_FlshSmtpGetServer((Tuint8 *)mail_server, sizeof(mail_server));
    U_FlshSmtpGetUnamePwd(&bAuthEnable, (Tuint8 *)user, (Tuint8 *)passwd);
    
    if (strlen(mail_server) > 0) 
    {
        U_FlshSmtpGetSubject((Tuint8 *)subject, sizeof(subject));
        if (bAuthEnable == Enable)
        {
            if (strlen((char *)user) == 0 || strlen((char *)passwd) == 0)
            {
                goto no_authenticate;
            }
            //syslog(LOG_ALERT, "mail_server=%s, sender=%s\n", mail_server, sender);
            //syslog(LOG_ALERT, "subject=%s, user=%s, passwd=%s, email_addr=%s\n", subject, user, passwd, email_addr);
            sprintf(buf, "/usr/sbin/mail -S %s -f %s -s \"%s\" -U %s -E %s %s < %s &", 
                    mail_server,  
                    sender,
                    subject,
                    user,
                    passwd,
                    email_addr,
                    mail_temp_file);
            //system(buf);
            //system("rm -rf /tmp/mailmessage.1");                    
        }
        else
        {
no_authenticate:            
            sprintf(buf, "/usr/sbin/mail -S %s -f %s -s \"%s\" %s < %s &",  
            mail_server, 
            sender,
            subject,
            email_addr,
            mail_temp_file);
        }
#if 0/*we should not log the mail message*/            
        syslog(LOG_NOTICE, "%s\n", buf);
#endif
        //printmsg(buf); // simonhuang, test

        system(buf);
        system("rm -rf /tmp/mailmessage.1");
    }

    return 0;
}


static void clear_relay_log(void)
{
    FILE *fp;
    
    if ((fp = fopen("/var/relay","w")) == NULL)
    {
        return;
    }   
    else 
    {
        fclose(fp);
    }

    return;
}    


void get_AlarmLogLog(void)
{
    send_header();
    printf("<html>\n");
    printf("<head>\n");
    send_meta();
    printf("<title>Warning / Alarm Log</title>\n");
    printf("<style type=\"text/css\">\n");
    printf("* {\n");
    printf("    font-family: \"Arial\";\n");
    printf("    font-size:12px;\n");
    printf("    margin:0;\n");
    printf("    padding:0; \n");
    printf("} \n");
    printf("fieldset {\n");
    printf("    padding:10px;\n");
    printf("    margin:10px;\n");
    printf("    width:500px;\n");
    printf("} \n");
    printf("legend {\n");
    printf("    color:#06c;\n");
    printf("}\n");
    printf("</style>\n");
    printf("</head>\n");
 
    printf("<body>\n");
    printf("<fieldset>\n");
    printf("<legend>Warning / Alarm Log</legend>\n");
    
    printf("  <p>&nbsp;</p>\n");
    printf("<table id=\"table1\" border=\"0\" cellpadding=\"1\" cellspacing=\"1\">\n");
    printf("  <tr>\n");
    printf("    <th width=\"50\" height=\"20\" bgcolor=\"#B9C9FF\" align=\"center\">Index</th>\n");
    printf("    <th width=\"80\" height=\"20\" bgcolor=\"#B9C9FF\" align=\"center\">Date</th>\n");
    printf("    <th width=\"50\" height=\"20\" bgcolor=\"#B9C9FF\" align=\"center\">Time</th>\n");
    printf("    <th width=\"100\" height=\"20\" bgcolor=\"#B9C9FF\" align=\"center\">Startup Time</th>\n");
    printf("    <th width=\"220\" height=\"20\" bgcolor=\"#B9C9FF\" align=\"center\">Events</th>\n");
    printf("  </tr>\n");
    relay_log();

    if (total_lines == 0) 
    {
        printf("  <tr>\n");
        printf("  <td height=\"20\" colspan=\"5\" align=\"center\">\n");
        printf("  There is no warning.\n");
        printf("  </td>\n");
        printf("  </tr>\n");
    }
    printf("</table>\n");
    printf("<script Language=\"Javascript\">\n");
    printf("function setColor(curElement)\n");
    printf("{\n");
    printf("    curElement.style.backgroundColor=\"#87BBFF\";\n");
    printf("}\n");
    printf("\n");
    printf("function resetColor(curElement)\n");
    printf("{\n");
    printf("    if (curElement.rowIndex%%2==0){\n");
    printf("            curElement.style.backgroundColor=\"#DFE9FF\";\n");
    printf("    }\n");
    printf("    else{\n");
    printf("            curElement.style.backgroundColor=\"#E8EDFF\";\n");
    printf("    }\n");
    printf("}\n");
    printf("\n");
    printf("document.writeln('<div id=\"onmouse\" style=\"display:none\" onmouseover=\"setColor(this)\" onmouseout=\"resetColor(this)\"></div>');\n");
    printf("var sTable = document.all.table1;\n");
    printf("if (sTable)\n");
    printf("for (var i=0; i<sTable.rows.length; i++)\n");
    printf("{\n");
    printf("    if (i%%2==0){\n");
    printf("    sTable.rows[i].style.backgroundColor=\"#DFE9FF\";\n");
    printf("    }\n");
    printf("    else{\n");
    printf("            sTable.rows[i].style.backgroundColor=\"#E8EDFF\";\n");
    printf("    }\n");
    printf(" \n");
    printf("    sTable.rows[i].onmouseover=document.all.onmouse.onmouseover;\n");
    printf("    sTable.rows[i].onmouseout=document.all.onmouse.onmouseout;\n");
    printf(" }\n");
    printf("function WebReload()");
    printf("{\n");
    printf("    window.parent.frames[1].location.reload();\n");
    printf("}\n");
    printf("setTimeout('WebReload()', 3000);");
    printf("</script>\n");
  
    printf("<p>&nbsp;</p>\n");
    printf("<table border=\"0\" cellpadding=\"1\" cellspacing=\"1\">\n");
    printf("    <tr>\n");
    printf("    <td width=\"250\" height=\"20\" bgcolor=\"#FFFFFF\" align=\"center\">\n");
    printf("        <form  name=\"frmRelayLog\" method=\"post\" action=\"/cgi-bin/post.cgi\">\n");
    printf("          <input type=\"submit\" value=\"    Clear Relay Alarm    \" onClick=\"WebReload();\">\n");
    printf("          <input type=\"hidden\" name=\"cmd\" value=\"clearRelayAlarm\">\n");
    printf("        </form>\n");
    printf("    </td>\n");
    printf("    <td width=\"250\" height=\"20\" bgcolor=\"#FFFFFF\" align=\"center\">\n");
    printf("      <form name=\"relayeventClrPage\" method=\"post\" action=\"/cgi-bin/post.cgi\">");
    printf("        <input type=\"hidden\" name=\"cmd\" value=\"alarmLogClearAllLog\">");
    printf("        <input type=\"submit\" value=\"    Clear All Log   \">");
    printf("      </form>");
    printf("    </td>\n");
    printf("    <td width=\"250\" height=\"20\" bgcolor=\"#FFFFFF\" align=\"center\">\n");
    printf("        <form  name=\"frmRelayLogRefresh\" method=\"post\" action=\"/cgi-bin/post.cgi\">\n");
    printf("          <input type=\"submit\" value=\"    Refresh    \" onClick=\"WebReload();\">\n");
    printf("        </form>\n");
    printf("    </td>\n");
#if defined(EH6520)
    printf("    <td width=\"250\" height=\"20\" bgcolor=\"#FFFFFF\" align=\"left\">\n");
    printf("        <form  name=\"frmRelayLog\" method=\"post\" action=\"/cgi-bin/post.cgi\">\n");
    printf("          <input type=\"submit\" value=\"Clear Alarm Led\" onClick=\"WebReload();\">\n");
    printf("          <input type=\"hidden\" name=\"cmd\" value=\"alarmledclear\">\n");
    printf("        </form>\n");
    printf("    </td>\n");
#endif
    printf("</table>\n");
  
    printf("</fieldset>\n");
    printf("<br /><br /><br />\n");
    printf("</body>\n");
    printf("</html>\n");
}



void get_AlarmLogSetting(void)
{
    Tuint8    pucRelayPort[MAX_PHY_PORT];
    Tuint8    pucEmailPort[MAX_PHY_PORT];
    Tuint8    pucRelayPower[2];
    Tuint8    pucEmailPower[2];
    Tuint8    ucRelaySyslog;
    Tuint8    ucEmailSyslog;
#if defined(EH6520)
    Tuint8    pucAlarmLedPort[MAX_PHY_PORT];
    Tuint8    pucAlarmLedPower[2];
#endif
    int i = 0;    

    U_SysGetRelayPort(pucRelayPort);
    U_SysGetRelayPower(pucRelayPower);
    U_SysGetEmailPower(pucEmailPower);
    U_SysGetRelaySyslog(&ucRelaySyslog);
#if defined(EH7510)||defined(EH6520) || defined(CS07020M100) || defined(RH7528)
    U_SysGetEmailPort(pucEmailPort);
    U_SysGetEmailSyslog(&ucEmailSyslog);
#if defined(EH6520)
    U_SysGetAlarmLedPort(pucAlarmLedPort);
    U_SysGetAlarmLedPower(pucAlarmLedPower);
#endif
#endif
    send_header();
    printf("<html>\n");
    printf("<head>\n");
    send_meta();
    printf("<title>Warning / Alarm Log Setting</title>\n");
    printf("<style type=\"text/css\">\n");
    printf("* {\n");
    printf("    font-family: \"Arial\";\n");
    printf("    font-size:12px;\n");
    printf("    margin:0;\n");
    printf("    padding:0; \n");
    printf("} \n");
    printf("fieldset {\n");
    printf("    padding:10px;\n");
    printf("    margin:10px;\n");
    printf("    width:400px;\n");
    printf("} \n");
    printf("legend {\n");
    printf("    color:#06c;\n");
    printf("}\n");
    printf("</style>\n");
    printf("</head>\n");
    printf("<body>\n");
    printf("<fieldset>\n");
    printf("<legend>Warning / Alarm Log Setting</legend>\n");
#if 0 //Ken modify, speed up web access
    printf("<script type=\"text/javascript\" language=\"JavaScript\">\n");
    printf("function window_onload(fm)\n");
    printf("{\n");
    printf("  var ports = new Array();\n");
#ifdef SYSLOG_WARNING 
    printf("  var tmp=%d, level = 0;\n", ucRelaySyslog);

    printf("  if (tmp==%d)\n", RELAY_WARNING_SYSLOG_DISABLE);
    printf("    level = 0;\n");
    printf("  else\n");
    printf("    level = tmp+1;\n");
    printf("  frmRelay.loglevel.options[level].selected = true;\n");
#endif
    for (i=0; i<MAX_PHY_PORT; i++) {
        printf("    ports[%d] = %d;\n", i, pucRelayPort[i]);
    }

    for (i=0; i<MAX_PHY_PORT; i++) {
        printf("  frmRelay.Port%d.options[ports[%d]].selected = true;\n", i+1, i);
    }
    printf("}\n");
    printf("//window_onload(this.frmRelay);\n");
    printf("</script>\n");
#endif 
    printf("<form  name=\"frmRelay\" method=\"post\" action=\"/cgi-bin/post.cgi\">\n");
    printf("<p>&nbsp;</p>\n");

    printf("    <table border=\"0\" cellspacing=\"1\" cellpadding=\"1\">\n");
    printf("        <tr>\n");
    printf("            <td width=\"250\" height=\"20\"  bgcolor=\"#FFFFFF\"align=\"center\"><br />\n");
    printf("              <form method=\"post\" action=\"/cgi-bin/post.cgi\">\n");
    printf("                <input type=\"submit\" value=\"   Update   \" />\n");
    printf("                <input type=\"hidden\" name=\"cmd\" value=\"alarmLogSetting\" />\n");
    printf("              </form>\n");
    printf("            </td>\n");
    printf("            <td width=\"250\" height=\"20\" bgcolor=\"#FFFFFF\" align=\"center\">Relay Test:&nbsp;&nbsp;\n");
    if (0 == relayAsserted)
    {
        printf("              <form method=\"post\" action=\"/cgi-bin/post.cgi\">\n");
        printf("                <input type=\"submit\" value=\"   Assert Relay   \" />\n");
        printf("                <input type=\"hidden\" name=\"cmd\" value=\"alarmLogTestRelay\" />\n");
        printf("              </form>\n");
    }
    else
    {
        printf("              <form method=\"post\" action=\"/cgi-bin/post.cgi\">\n");
        printf("                <input type=\"submit\" value=\"   Reset Relay   \" />\n");
        printf("                <input type=\"hidden\" name=\"cmd\" value=\"AlarmLogResetRelay\" />\n");
        printf("              </form>\n");
    }
    printf("            </td>\n");
    printf("        </tr>\n");
    printf("    </table>\n");

    printf("<p>&nbsp;</p>\n");

    printf("  <table id=\"table1\" border=\"0\" cellpadding=\"1\" cellspacing=\"1\">\n");
    printf("    <tr>\n");
    printf("        <th colspan=\"3\" bgcolor=\"#B9C9FF\" width=\"100\" height=\"20\" align=\"center\">Port Related Warning Alarms</th>\n");
    printf("    </tr>\n");
    printf("    <tr>\n");
    printf("        <th bgcolor=\"#B9C9FF\" width=\"100\" height=\"20\" align=\"center\">Port</th>\n");
    printf("        <th bgcolor=\"#B9C9FF\" width=\"150\" height=\"20\" align=\"center\">Relay</th>\n");
#if defined(EH7510)||defined(EH6520) || defined(CS07020M100) || defined(RH7528)
    printf("        <th bgcolor=\"#B9C9FF\" width=\"150\" height=\"20\" align=\"center\">E-mail</th>\n");
#if defined(EH6520)
    printf("        <th bgcolor=\"#B9C9FF\" width=\"150\" height=\"20\" align=\"center\">Alarm Led</th>\n");
#endif
#endif
    printf("    </tr>\n");

    printf("    <tr>\n");
    printf("      <td width=\"100\" height=\"20\" align=\"center\"><input type=\"checkbox\" name=\"applyall\" onClick=\"disAllPorts(document.frmRelay)\" />&nbsp;&nbsp;Apply to All</td>\n");
    printf("      <td height=\"20\" align=\"center\">\n");
    printf("        <select name=\"Port0\">\n");
    printf("            <option value=\"0\" selected>Disabled</option>\n");
    printf("            <option value=\"1\">Link Up</option>\n");
    printf("            <option value=\"2\">Link Down</option>\n");
    printf("            <option value=\"3\">Link Up/Down</option>\n");
    printf("        </select>\n");
    printf("      </td>\n");
    
    printf("      <td height=\"20\" align=\"center\">\n");
    printf("        <select name=\"Email0\">\n");
    printf("            <option value=\"0\" selected>Disabled</option>\n");
    printf("            <option value=\"1\">Link Up</option>\n");
    printf("            <option value=\"2\">Link Down</option>\n");
    printf("            <option value=\"3\">Link Up/Down</option>\n");
    printf("        </select>\n");
    printf("      </td>\n");
    printf("    </tr>\n");

    for (i = 0; i < MAX_PHY_PORT; i++) 
    {
        Tchar   acLogicId[MAX_LOGIC_ID_LEN];
        
        U_TrkLId2LogicId(acLogicId, i);
        printf("    <tr>\n");
        printf("      <td height=\"20\" align=\"center\">%s</td>\n", acLogicId);
        printf("      <td height=\"20\" align=\"center\">\n");
        printf("        <select name=\"Port%d\">\n", i + 1);
        printf("            <option value=\"0\" %s>Disabled</option>\n", (pucRelayPort[i] == 0) ? "selected" :"");
        printf("            <option value=\"1\" %s>Link Up</option>\n", (pucRelayPort[i] == 1) ? "selected" :"");
        printf("            <option value=\"2\" %s>Link Down</option>\n", (pucRelayPort[i] == 2) ? "selected" :"");
        printf("            <option value=\"3\" %s>Link Up/Down</option>\n", (pucRelayPort[i] == 3) ? "selected" :"");
        printf("        </select>\n");
        printf("      </td>\n");
#if defined(EH7510) ||defined(EH6520)|| defined(CS07020M100) || defined(RH7528)
        printf("      <td height=\"20\" align=\"center\">\n");
        printf("        <select name=\"Email%d\">\n", i+1);
        printf("            <option value=\"0\" %s>Disabled</option>\n", (pucEmailPort[i]==0) ? "selected" : "");
        printf("            <option value=\"1\" %s>Link Up</option>\n", (pucEmailPort[i]==1) ? "selected" : "");
        printf("            <option value=\"2\" %s>Link Down</option>\n", (pucEmailPort[i]==2) ? "selected" : "");
        printf("            <option value=\"3\" %s>Link Up/Down</option>\n", (pucEmailPort[i]==3) ? "selected" : "");
        printf("        </select>\n");
        printf("      </td>\n");
#endif
#if defined(EH6520)
        printf("      <td height=\"20\" align=\"center\">\n");
        printf("        <select name=\"Led%d\">\n", i+1);
        printf("            <option value=\"0\" %s>Disabled</option>\n", (pucAlarmLedPort[i]==0) ? "selected" : "");
        printf("            <option value=\"1\" %s>Link Up</option>\n", (pucAlarmLedPort[i]==1) ? "selected" : "");
        printf("            <option value=\"2\" %s>Link Down</option>\n", (pucAlarmLedPort[i]==2) ? "selected" : "");
        printf("            <option value=\"3\" %s>Link Up/Down</option>\n", (pucAlarmLedPort[i]==3) ? "selected" : "");
        printf("        </select>\n");
        printf("      </td>\n");
#endif
        printf("    </tr>\n");
    }
    
    printf("  </table>\n");
    printf("<p>&nbsp;</p>\n");
    printf("<script Language=\"Javascript\">\n");
    printf("var sTable = document.all.table1;\n");
    printf("if (sTable)\n");
    printf("for (var i=0; i<sTable.rows.length; i++)\n");
    printf("{\n");
    printf("    if (i%%2==0)\n");
    printf("            sTable.rows[i].style.backgroundColor=\"#E8EDFF\";\n");
    printf("    else\n");
    printf("            sTable.rows[i].style.backgroundColor=\"#DFE9FF\";\n");
    printf("}\n");
    printf("</script>\n");

#if defined(EH7510)||defined(EH6520) || defined(RH7528)
    printf("<p>&nbsp;</p>\n");
    printf("<p>&nbsp; </p>\n");
    printf("<table table id=\"table2\" border=\"0\" cellpadding=\"1\" cellspacing=\"1\">\n");
    printf("    <tr>\n");    
    printf("      <th colspan=\"3\" bgcolor=\"#B9C9FF\" width=\"100\" height=\"20\" align=\"center\">Power Status Related Warning Alarms</th>\n");
    printf("    </tr>\n");
    printf("      <tr>\n");
    printf("      <th width=\"100\" height=\"20\" bgcolor=\"#B9C9FF\" align=\"center\">Power</th>\n");
    printf("      <th width=\"150\" height=\"20\" bgcolor=\"#B9C9FF\" align=\"center\">Relay</th>\n");
    printf("      <th width=\"150\" height=\"20\" bgcolor=\"#B9C9FF\" align=\"center\">E-mail</th>\n");
#if defined(EH6520)
    printf("      <th width=\"150\" height=\"20\" bgcolor=\"#B9C9FF\" align=\"center\">Alarm Led</th>\n");
#endif
    printf("    </tr>\n");
    for (i = 0; i < 2; i++) 
    {
        printf("    <tr>\n");
        printf("      <td height=\"20\" align=\"center\">Power%d</td>\n", i + 1);
        printf("      <td height=\"20\" align=\"center\">\n");
        printf("        <select name=\"Power%d\">\n", i + 1);
        printf("            <option value=\"0\" %s>Disabled</option>\n", (pucRelayPower[i] == 0) ? "selected" : "");
        printf("            <option value=\"1\" %s>Power On</option>\n", (pucRelayPower[i] == 1) ? "selected" : "");
        printf("            <option value=\"2\" %s>Power Off</option>\n", (pucRelayPower[i] == 2) ? "selected" : "");
        printf("        </select>\n");
        printf("      </td>\n");
        printf("      <td height=\"20\" align=\"center\">\n");
        printf("        <select name=\"Pmail%d\">\n", i + 1);
        printf("            <option value=\"0\" %s>Disabled</option>\n", (pucEmailPower[i] == 0) ? "selected" : "");
        printf("            <option value=\"1\" %s>Power On</option>\n", (pucEmailPower[i] == 1) ? "selected" : "");
        printf("            <option value=\"2\" %s>Power Off</option>\n", (pucEmailPower[i] == 2) ? "selected" : "");
        printf("        </select>\n");
        printf("      </td>\n");
#if defined(EH6520)
        printf("      <td height=\"20\"align=\"center\">\n");
        printf("        <select name=\"Pled%d\">\n", i + 1);
        printf("            <option value=\"0\" %s>Disabled</option>\n", (pucAlarmLedPower[i]==0) ? "selected" : "");
        printf("            <option value=\"1\" %s>Power On</option>\n", (pucAlarmLedPower[i]==1) ? "selected" : "");
        printf("            <option value=\"2\" %s>Power Off</option>\n", (pucAlarmLedPower[i]==2) ? "selected" : "");
        printf("        </select>\n");
        printf("      </td>\n");
#endif
        printf("    </tr>\n");
    }
    printf("  </table>\n");
    printf("<p>&nbsp;</p>\n");

    printf("<script Language=\"Javascript\">\n");
    printf("var sTable = document.all.table2;\n");
    printf("if (sTable)\n");
    printf("for (var i=0; i<sTable.rows.length; i++)\n");
    printf("{\n");
    printf("    if (i%%2==0)\n");
    printf("            sTable.rows[i].style.backgroundColor=\"#E8EDFF\";\n");
    printf("    else\n");
    printf("            sTable.rows[i].style.backgroundColor=\"#DFE9FF\";\n");
    printf("}\n");
    printf("</script>\n");
#endif

#ifdef SYSLOG_WARNING    
    printf("<p>&nbsp;</p>\n");
    printf("<p>&nbsp; </p>\n");
    printf("<table table id=\"table3\" border=\"0\" cellpadding=\"1\" cellspacing=\"1\">\n");
    printf("    <tr>\n");
    printf("      <th colspan=\"3\" bgcolor=\"#B9C9FF\" width=\"100\" height=\"20\" align=\"center\">System Related Warning Alarms</th>\n");
    printf("    </tr>\n");
    printf("    <tr>\n");
    printf("      <th width=\"100\" height=\"20\" bgcolor=\"#B9C9FF\" align=\"center\"></th>\n");
    printf("      <th width=\"150\" height=\"20\" bgcolor=\"#B9C9FF\" align=\"center\">Relay</th>\n");
#if defined(EH7510)||defined(EH6520) || defined(CS07020M100) || defined(RH7528)
    printf("      <th width=\"150\" height=\"20\" bgcolor=\"#B9C9FF\" align=\"center\">E-mail</th>\n");
#endif
    printf("    </tr>\n");
    printf("    <tr>\n");
    printf("    <td height=\"20\" align=\"center\">System Log Level</td>\n");
    
    //Ken modify, speed up web access
    printf("    <td height=\"20\" align=\"center\">\n");
    printf("      <select name=\"RelayAlarmLogLevel\">\n");
    printf("        <option value=\"%d\" %s>Disabled</option>\n", RELAY_WARNING_SYSLOG_DISABLE, (ucRelaySyslog == RELAY_WARNING_SYSLOG_DISABLE)? "selected": "");
    printf("        <option value=\"0\" %s>0: (LOG_EMERG)</option>\n", (ucRelaySyslog == 0) ? "selected" : "");
    printf("        <option value=\"1\" %s>1: (LOG_ALERT)</option>\n", (ucRelaySyslog == 1) ? "selected" : "");
    printf("        <option value=\"2\" %s>2: (LOG_CRIT)</option>\n", (ucRelaySyslog == 2) ? "selected" : "");
    printf("        <option value=\"3\" %s>3: (LOG_ERR)</option>\n", (ucRelaySyslog == 3) ? "selected" : "");
    printf("        <option value=\"4\" %s>4: (LOG_WARNING)</option>\n", (ucRelaySyslog == 4) ? "selected" : "");
    printf("        <option value=\"5\" %s>5: (LOG_NOTICE)</option>\n", (ucRelaySyslog == 5) ? "selected" : "");
    printf("        <option value=\"6\" %s>6: (LOG_INFO)</option>\n", (ucRelaySyslog == 6) ? "selected" : "");
    printf("        <option value=\"7\" %s>7: (LOG_DEBUG)</option>\n", (ucRelaySyslog == 7) ? "selected" : "");
    printf("      </select>\n");
    printf("    </td>\n");
#if defined(EH7510) ||defined(EH6520)|| defined(CS07020M100) || defined(RH7528)
    printf("    <td height=\"20\" align=\"center\">\n");
    printf("      <select name=\"Emal\">\n");
    printf("        <option value=\"%d\" %s>Disabled</option>\n", EMAIL_WARNING_SYSLOG_DISABLE, (ucEmailSyslog == EMAIL_WARNING_SYSLOG_DISABLE) ? "selected" : "");
    printf("        <option value=\"0\" %s>0: (LOG_EMERG)</option>\n", (ucEmailSyslog == 0) ? "selected" : "");
    printf("        <option value=\"1\" %s>1: (LOG_ALERT)</option>\n", (ucEmailSyslog == 1) ? "selected" : "");
    printf("        <option value=\"2\" %s>2: (LOG_CRIT)</option>\n", (ucEmailSyslog == 2) ? "selected" : "");
    printf("        <option value=\"3\" %s>3: (LOG_ERR)</option>\n", (ucEmailSyslog == 3) ? "selected" : "");
    printf("        <option value=\"4\" %s>4: (LOG_WARNING)</option>\n", (ucEmailSyslog == 4) ? "selected" : "");
    printf("        <option value=\"5\" %s>5: (LOG_NOTICE)</option>\n", (ucEmailSyslog == 5) ? "selected" : "");
    printf("        <option value=\"6\" %s>6: (LOG_INFO)</option>\n", (ucEmailSyslog == 6) ? "selected" : "");
    printf("        <option value=\"7\" %s>7: (LOG_DEBUG)</option>\n", (ucEmailSyslog == 7) ? "selected" : "");
    printf("      </select>\n");
    printf("    </td>\n");
#endif
    printf("    </tr>\n");

#if defined (__DEVELOPMENT_VERSION__)
    /* [mantis 259][simonhuang] new features */
    printf("  <tr %s>\n", HTML_INCELL_DISABLED_STYLE);
    printf("    <td height=\"20\" align=\"center\">System Cold Start</td>\n");
    printf("    <td height=\"20\" align=\"center\">\n");
    printf("      <select name=\"SysColdStartRelay\">\n");
    printf("        <option value=\"%d\" %s>Disabled</option>\n", RELAY_WARNING_SYSLOG_DISABLE, "selected");
    printf("        <option value=\"0\" %s>Enabled</option>\n", "");
    printf("      </select>\n");
    printf("    </td>\n");
    printf("    <td height=\"20\" align=\"center\">\n");
    printf("      <select name=\"SysColdStartEmail\">\n");
    printf("        <option value=\"%d\" %s>Disabled</option>\n", RELAY_WARNING_SYSLOG_DISABLE, "selected");
    printf("        <option value=\"0\" %s>Enabled</option>\n", "");
    printf("      </select>\n");
    printf("    </td>\n");
    printf("  </tr>\n");
    printf("  <tr %s>\n", HTML_INCELL_DISABLED_STYLE);
    printf("    <td height=\"20\" align=\"center\">System Warm Start</td>\n");
    printf("    <td height=\"20\" align=\"center\">\n");
    printf("      <select name=\"SysWarmStartRelay\">\n");
    printf("        <option value=\"%d\" %s>Disabled</option>\n", RELAY_WARNING_SYSLOG_DISABLE, "selected");
    printf("        <option value=\"0\" %s>Enabled</option>\n", "");
    printf("      </select>\n");
    printf("    </td>\n");
    printf("    <td height=\"20\" align=\"center\">\n");
    printf("      <select name=\"SysWarmStartEmail\">\n");
    printf("        <option value=\"%d\" %s>Disabled</option>\n", RELAY_WARNING_SYSLOG_DISABLE, "selected");
    printf("        <option value=\"0\" %s>Enabled</option>\n", "");
    printf("      </select>\n");
    printf("    </td>\n");
    printf("  </tr>\n");
    printf("  <tr %s>\n", HTML_INCELL_DISABLED_STYLE);
    printf("    <td height=\"20\" align=\"center\">STP/ERPS Topology Changed</td>\n");
    printf("    <td height=\"20\" align=\"center\">\n");
    printf("      <select name=\"TopChangedRelay\">\n");
    printf("        <option value=\"%d\" %s>Disabled</option>\n", RELAY_WARNING_SYSLOG_DISABLE, "selected");
    printf("        <option value=\"0\" %s>Enabled</option>\n", "");
    printf("      </select>\n");
    printf("    </td>\n");
    printf("    <td height=\"20\" align=\"center\">\n");
    printf("      <select name=\"TopChangedEmail\">\n");
    printf("        <option value=\"%d\" %s>Disabled</option>\n", RELAY_WARNING_SYSLOG_DISABLE, "selected");
    printf("        <option value=\"0\" %s>Enabled</option>\n", "");
    printf("      </select>\n");
    printf("    </td>\n");
    printf("  </tr>\n");
#endif
    
    printf("  </table>\n");
    printf("  <p>&nbsp;</p>\n");
#endif   
    printf("  <p>&nbsp;</p>\n");

    printf("<p align=\"center\">\n");
    printf("  <input type=\"submit\" value=\"   Update   \" />\n");
    printf("  <input type=\"hidden\" name=\"cmd\" value=\"alarmLogSetting\" />\n");
    printf("</p>\n");

    printf("</form>\n");
    printf("<p></p>\n");
    printf("</fieldset>\n");
    printf("<br /><br /><br />\n");

    javascript_color_tablerows();

    printf("<script type=\"text/javascript\" language=\"JavaScript\">\n");
    printf("function disAllPorts(fm)\n");
    printf("{\n");
    printf("    if (fm.applyall.checked)\n");
    printf("    {\n");
    for (i = 1; i <= MAX_PHY_PORT; i++) 
    {
        printf("        document.frmRelay.Port%d.disabled = true;\n", i);
        printf("        document.frmRelay.Email%d.disabled = true;\n", i);
    }
    printf("    }\n");
    printf("    else\n");
    printf("    {\n");
    for (i = 1; i <= MAX_PHY_PORT; i++) 
    {
        printf("        document.frmRelay.Port%d.disabled = false;\n", i);
        printf("        document.frmRelay.Email%d.disabled = false;\n", i);
    }
    printf("    }\n");
    printf("\n");
    printf("}\n");
    printf("</script>\n");
    
    printf("</body>\n");
    printf("</html>\n");
}


/* [20130506][mantis 190][simonhuang] re-organize the layout of 'SMTP setting' page of Web-UI */
void get_AlarmLogSmtpSetting(void)
{
    Tuint8    servAdd[MAX_MAIL_SERVER_NAME_LEN];
    Tuint8    sendAdd[MAX_MAIL_SERVER_NAME_LEN];
    Tuint8    subject[MAX_MAIL_SERVER_ACCOUNT_LEN];
    Tbool     bAuthEnable = Enable;
    Tuint8    uName[MAX_MAIL_SERVER_ACCOUNT_LEN];
    Tuint8    passwd[MAX_MAIL_SERVER_PASSWORD_LEN];
    Tuint8    recAdd1[MAX_MAIL_SERVER_NAME_LEN];
    Tuint8    recAdd2[MAX_MAIL_SERVER_NAME_LEN];
    Tuint8    recAdd3[MAX_MAIL_SERVER_NAME_LEN];
    Tuint8    recAdd4[MAX_MAIL_SERVER_NAME_LEN];
    
    U_FlshSmtpGetServer(servAdd, sizeof(servAdd));
    U_FlshSmtpGetSendAdd(sendAdd, sizeof(sendAdd));
    U_FlshSmtpGetSubject(subject, sizeof(subject));
    U_FlshSmtpGetUnamePwd(&bAuthEnable, uName, passwd);
    U_FlshSmtpGetRecAdd(recAdd1, recAdd2, recAdd3, recAdd4);
    
    send_header();
    printf("<html>\n");
    printf("<head>\n");
    send_meta();
    printf("<title>SMTP Setting</title>\n");
    printf("<style type=\"text/css\">\n");
    printf("* {\n");
    printf("    font-family: \"Arial\";\n");
    printf("    font-size:12px;\n");
    printf("    margin:0;\n");
    printf("    padding:0; \n");
    printf("} \n");
    printf("fieldset {\n");
    printf("    padding:10px;\n");
    printf("    margin:10px;\n");
    printf("    width:380px;\n");
    printf("} \n");
    printf("legend {\n");
    printf("    color:#06c;\n");
    printf("}\n");
    printf("</style>\n");
    printf("</head>\n");
    printf("<body onload=\"SetAuth();\">\n");
    printf("<fieldset>\n");
    printf("<legend>SMTP Setting</legend>\n");
    printf("<form name=\"alertcfg\" method=\"post\" action=\"/cgi-bin/post.cgi\" onSubmit=\"return check_error();\">\n");
    printf("  <p>&nbsp;</p>\n");
    printf("    <table id=\"table1\" width=\"380\" border=\"0\" cellspacing=\"1\" cellpadding=\"1\">\n");
    printf("        <tr>\n");
    printf("            <td width=\"180\" height=\"20\">&nbsp;&nbsp;SMTP Server</td>\n");
    printf("            <td width=\"200\" height=\"20\"><input type=\"TEXT\" name=\"SmtpServerIP\" size=\"32\" maxlength=\"%d\" value=\"%s\" /></td>\n", MAX_MAIL_SERVER_NAME_LEN-1, servAdd);
    printf("        </tr>\n");
    printf("        <tr>\n");
    printf("            <td width=\"180\" height=\"20\">&nbsp;&nbsp;Authentication</td>\n");
    printf("            <td width=\"200\" height=\"20\"><input type=\"checkbox\" name=\"lAuth\" onClick=\"SetAuth()\" %s /></td>\n", (bAuthEnable == Enable)? "checked": "");
    printf("        </tr>\n");
    printf("        <tr>\n");
    printf("            <td width=\"180\" height=\"20\">&nbsp;&nbsp;User Name</td>\n");
    printf("            <td width=\"200\" height=\"20\"><input type=\"TEXT\" name=\"cAccount\" size=\"20\" maxlength=\"%d\" value=\"%s\" /></td>\n", MAX_MAIL_SERVER_ACCOUNT_LEN-1, uName);
    printf("        </tr>\n");
    printf("        <tr>\n");
    printf("            <td width=\"180\" height=\"20\">&nbsp;&nbsp;Password</td>\n");
    printf("            <td width=\"200\" height=\"20\"><input type=\"password\" name=\"dPassword\" size=\"20\" maxlength=\"%d\" value=\"%s\" /></td>\n", MAX_MAIL_SERVER_PASSWORD_LEN-1, passwd);
    printf("        </tr>\n");
    printf("        <tr>\n");
    printf("            <td width=\"180\" height=\"20\">&nbsp;&nbsp;Contact Persion</td>\n");
    printf("            <td width=\"200\" height=\"20\"><input type=\"TEXT\" name=\"aSender\" size=\"32\" maxlength=\"%d\" value=\"%s\" /></td>\n", MAX_MAIL_SERVER_NAME_LEN-1, sendAdd);
    printf("        </tr>\n");
    printf("        <tr>\n");
    printf("            <td width=\"180\" height=\"20\">&nbsp;&nbsp;Subject of Mail</td>\n");
    printf("            <td width=\"200\" height=\"20\"><input type=\"TEXT\" name=\"bSubject\" size=\"32\" maxlength=\"%d\" value=\"%s\" /></td>\n", MAX_MAIL_SERVER_ACCOUNT_LEN - 1, subject);
    printf("        </tr>\n");
    printf("        <tr>\n");
    printf("            <td width=\"180\" height=\"20\">&nbsp;&nbsp;E-mail Address of Recipient 1</td>\n");
    printf("            <td width=\"200\" height=\"20\"><input type=\"TEXT\" name=\"RcptAddr1\" size=\"32\" maxlength=\"%d\" value=\"%s\" /></td>\n", MAX_MAIL_SERVER_NAME_LEN-1, recAdd1);
    printf("        </tr>\n");
    printf("        <tr>\n");
    printf("            <td width=\"180\" height=\"20\">&nbsp;&nbsp;E-mail Address of Recipient 2</td>\n");
    printf("            <td width=\"200\" height=\"20\"><input type=\"TEXT\" name=\"RcptAddr2\" size=\"32\" maxlength=\"%d\" value=\"%s\" /></td>\n", MAX_MAIL_SERVER_NAME_LEN-1, recAdd2);
    printf("        </tr>\n");
    printf("        <tr>\n");
    printf("            <td width=\"180\" height=\"20\">&nbsp;&nbsp;E-mail Address of Recipient 3</td>\n");
    printf("            <td width=\"200\" height=\"20\"><input type=\"TEXT\" name=\"RcptAddr3\" size=\"32\" maxlength=\"%d\" value=\"%s\" /></td>\n", MAX_MAIL_SERVER_NAME_LEN-1, recAdd3);
    printf("        </tr>\n");
    printf("        <tr>\n");
    printf("            <td width=\"180\" height=\"20\">&nbsp;&nbsp;E-mail Address of Recipient 4</td>\n");
    printf("            <td width=\"200\" height=\"20\"><input type=\"TEXT\" name=\"RcptAddr4\" size=\"32\" maxlength=\"%d\" value=\"%s\" /></td>\n", MAX_MAIL_SERVER_NAME_LEN-1, recAdd4);
    printf("        </tr>\n");
    printf("    </table>\n");
    printf("  <p>&nbsp;</p>\n");
    printf("    <table border=\"0\" cellspacing=\"1\" cellpadding=\"1\">\n");
    printf("        <tr>\n");
    printf("            <td width=\"250\" height=\"20\" bgcolor=\"#FFFFFF\" align=\"center\">\n");
    printf("              <form method=\"post\" action=\"/cgi-bin/post.cgi\">\n");
    printf("                <input type=\"submit\" value=\"   Update   \" />\n");
    printf("                <input type=\"hidden\" name=\"cmd\" value=\"alarmLogSmtpSetting\" />\n");
    printf("              </form>\n");
    printf("            </td>\n");
    printf("            <td width=\"250\" height=\"20\" bgcolor=\"#FFFFFF\" align=\"center\">\n");
    printf("              <form method=\"post\" action=\"/cgi-bin/post.cgi\">\n");
    printf("                <input type=\"submit\" value=\"   Send Test E-mail   \" />\n");
    printf("                <input type=\"hidden\" name=\"cmd\" value=\"alarmLogSendTestEmail\" />\n");
    printf("              </form>\n");
    printf("            </td>\n");
    printf("        </tr>\n");
    printf("    </table>\n");
    // [20130808][mantis 251][MarkHsu] refine the Web-UI to let SMTP Settings work correct
    printf("</form>\n");
    
    printf("<script language=\"javascript\">\n");
    printf("function SetAuth()\n");
    printf("{\n");
    printf("    document.alertcfg.cAccount.disabled = !document.alertcfg.lAuth.checked;\n");
    printf("    document.alertcfg.dPassword.disabled = !document.alertcfg.lAuth.checked;\n");
    printf("}\n");
    
    printf("var sTable = document.all.table1;\n");
    printf("if (sTable)\n");
    printf("for (var i=0; i<sTable.rows.length; i++)\n");
    printf("{\n");
    printf("    if (i%%2==0)\n");
    printf("            sTable.rows[i].style.backgroundColor=\"#E8EDFF\";\n");
    printf("    else\n");
    printf("            sTable.rows[i].style.backgroundColor=\"#DFE9FF\";\n");
    printf("}\n");
    
    printf("function check(x)\n");
    printf("{\n");
    printf("    if (x.value.length!=0)\n");
    printf("    {\n");
    printf("        if (x.value.charAt(0)==\".\" ||");
    printf("x.value.charAt(0)==\"@\"||");
    printf("x.value.indexOf('@', 0) == -1 ||");
    printf("x.value.indexOf('.', 0) == -1 ||");
    printf("x.value.lastIndexOf(\"@\")==x.value.length-1 ||");
    printf("x.value.lastIndexOf(\".\")==x.value.length-1)\n");
    printf("        {\n");
    printf("            alert(\"Invalid format E-mail Address\");\n");
    printf("            x.focus();\n");
    printf("            return false;\n");
    printf("        }\n");
    printf("    }\n");
    printf("    return true;\n");
    printf("}\n");
    
    printf("function check_error()\n");
    printf("{\n");
    printf("    if (!(check(document.alertcfg.aSender)))     return false;\n");
    printf("    if (!(check(document.alertcfg.RcptAddr1)))     return false;\n");
    printf("    if (!(check(document.alertcfg.RcptAddr2)))     return false;\n");
    printf("    if (!(check(document.alertcfg.RcptAddr3)))     return false;\n");
    printf("    if (!(check(document.alertcfg.RcptAddr4)))     return false;\n");
    printf("    return true;\n");
    printf("}\n");
    printf("</script>\n");
    printf("</fieldset>\n");

    javascript_color_tablerows();

    printf("<br /><br /><br />\n");
    printf("</body>\n");
    printf("</html>\n");
}


void post_AlarmLogSetting (struct httpform *form)
{
    int         i;
    int         j;
    Tuint8      portId = 0;
    Tuint8      powerId = 0;
    Tuint8      relayAlarmPorts[MAX_PHY_PORT] = {0};    /* trigger level of relay alarm of ports */
    Tuint8      emailAlarmPorts[MAX_PHY_PORT] = {0};    /* trigger level of e-mail alarm of ports */
    Tuint8      relayAlarmPowers[2] = {0};              /* trigger level of relay alarm of powers */
    Tuint8      emailAlarmPowers[2] = {0};              /* trigger level of e-mail alarm of ports */
    Tuint8      relayAlarmLogLevel = 0;                 /* trigger level of relay alarm of system log */
    Tuint8      emailAlarmLogLevel = 0;                 /* trigger level of e-mail alarm of system log */
#if defined(EH6520)
    Tuint8      ledAlarmPorts[MAX_PHY_PORT] = 0;
    Tuint8      ledAlarmPowers[2] = 0;
#endif


    for (i = 0; i < form->nv_ct; ++i) 
    {  
        if (strncmp(form->nameval[i].name, "Port", 4) == 0) 
        {
            portId = (Tuint8)atoi(form->nameval[i].name + 4);
            if (0 == portId)
            {
                /* apply to all */
                for (j = 0; j < MAX_PHY_PORT; j++)
                {
                    relayAlarmPorts[j] = (Tuint8)atoi(form->nameval[i].value);
                }
            }
            else if (portId <= MAX_PHY_PORT) 
            {
                relayAlarmPorts[portId - 1] = (Tuint8)atoi(form->nameval[i].value);
            }
        }
        else if (strncmp(form->nameval[i].name, "Email", 5) == 0) 
        {
            portId = (Tuint8)atoi(form->nameval[i].name + 5);
            if (0 == portId)
            {
                /* apply to all */
                for (j = 0; j < MAX_PHY_PORT; j++)
                {
                    emailAlarmPorts[j] = (Tuint8)atoi(form->nameval[i].value);
                }
            }
            else if (portId <= MAX_PHY_PORT) 
            {
                emailAlarmPorts[portId - 1] = (Tuint8)atoi(form->nameval[i].value);
            }
        }
        else if (strncmp(form->nameval[i].name, "Power", 5) == 0) 
        {
            powerId = (Tuint8)atoi(form->nameval[i].name + 5);
            if (1 == powerId || 2 == powerId) 
            {
                relayAlarmPowers[powerId - 1] = (Tuint8)atoi(form->nameval[i].value);
            }
        }
        else if (strncmp(form->nameval[i].name, "Pmail", 5) == 0) 
        {
            powerId = (Tuint8)atoi(form->nameval[i].name + 5);
            if (1 == powerId || 2 == powerId) 
            {
                emailAlarmPowers[powerId - 1] = (Tuint8)atoi(form->nameval[i].value);
            }
        }
        else if (strcmp(form->nameval[i].name, "RelayAlarmLogLevel") == 0) 
        {
            relayAlarmLogLevel = (Tuint8)atoi(form->nameval[i].value);
        }
        //else if (strcmp(form->nameval[i].name, "EmailAlarmLogLevel") == 0) 
        else if (strcmp(form->nameval[i].name, "Emal") == 0) 
        
        {
#if 0
        {
        char tmpbuf[16] = {0};
        sprintf(tmpbuf, "name = %s", form->nameval[i].name);
        printmsg(tmpbuf);
        return;
    }
#endif
            emailAlarmLogLevel = (Tuint8)atoi(form->nameval[i].value);
        }
#if defined(EH6520)
        else if (strncmp(form->nameval[i].name, "Led", 3) == 0) 
        {
            portId = (Tuint8)atoi(form->nameval[i].name + 3);
            if (portId >= 1 && portId <= MAX_PHY_PORT) 
            {
                ledAlarmPorts[portId - 1] = (Tuint8)atoi(form->nameval[i].value);
            }
        }
        else if (strncmp(form->nameval[i].name, "Pled", 4) == 0) 
        {
            powerId = (Tuint8)atoi(form->nameval[i].name + 4);
            if (1 == powerId || 2 == powerId) 
            {
                ledAlarmPowers[powerId - 1] = (Tuint8)atoi(form->nameval[i].value);
            }
        }
#endif
    }

#if 0
    {
        char tmpbuf[16] = {0};
        sprintf(tmpbuf, "emailAlarmLogLevel = %d", emailAlarmLogLevel);
        printmsg(tmpbuf);
        return;
    }    
#else
    U_SysSetRelayPort(relayAlarmPorts);
    U_SysSetRelayPower(relayAlarmPowers);
    U_SysSetEmailPower(emailAlarmPowers);
    U_SysSetRelaySyslog(&relayAlarmLogLevel);
    U_SysSetEmailPort(emailAlarmPorts);
    U_SysSetEmailSyslog(&emailAlarmLogLevel);
#if defined(EH6520)
    U_SysSetAlarmLedPort(ledAlarmPorts);
    U_SysSetAlarmLedPower(ledAlarmPowers);
#endif

    U_SysSetRelayConfig();

    get_AlarmLogSetting();
#endif
    return;
}


/* [20130506][mantis 190][simonhuang] re-organize the layout of 'SMTP setting' page of Web-UI */
void post_AlarmLogSmtpSetting(struct httpform *form)
{
    int    i;
    char   servAdd[MAX_MAIL_SERVER_NAME_LEN];
    char   sendAdd[MAX_MAIL_SERVER_NAME_LEN];
    char   mSubject[MAX_MAIL_SERVER_ACCOUNT_LEN];
    Tbool  bAuthEnable = Disable;
    char   uName[MAX_MAIL_SERVER_ACCOUNT_LEN];
    char   psswd[MAX_MAIL_SERVER_PASSWORD_LEN];
    char   recAdd1[MAX_MAIL_SERVER_NAME_LEN];
    char   recAdd2[MAX_MAIL_SERVER_NAME_LEN];
    char   recAdd3[MAX_MAIL_SERVER_NAME_LEN];
    char   recAdd4[MAX_MAIL_SERVER_NAME_LEN];
    
    servAdd[0] = '\0';
    sendAdd[0] = '\0';
    mSubject[0] = '\0';
    uName[0]= '\0';
    psswd[0]= '\0';
    recAdd1[0]= '\0';
    recAdd2[0]= '\0';
    recAdd3[0]= '\0';
    recAdd4[0]= '\0';
    
    for (i = 0; i < form->nv_ct; ++i) 
    {
        if (strcmp(form->nameval[i].name, "SmtpServerIP") == 0) 
        {
            strncpy(servAdd, form->nameval[i].value, MAX_MAIL_SERVER_NAME_LEN - 1);
            servAdd[MAX_MAIL_SERVER_NAME_LEN - 1] = '\0';
        }
        else if (strcmp(form->nameval[i].name, "aSender") == 0) 
        {
            strncpy(sendAdd, form->nameval[i].value, MAX_MAIL_SERVER_NAME_LEN - 1);
            sendAdd[MAX_MAIL_SERVER_NAME_LEN - 1] = '\0';
        }
        else if (strcmp(form->nameval[i].name, "bSubject") == 0) 
        {
            strncpy(mSubject, form->nameval[i].value, MAX_MAIL_SERVER_ACCOUNT_LEN - 1);
            mSubject[MAX_MAIL_SERVER_ACCOUNT_LEN - 1] = '\0';
        }
        else if (strcmp(form->nameval[i].name, "lAuth") == 0) 
        {
            bAuthEnable = Enable;
        }
        else if (strcmp(form->nameval[i].name, "cAccount") == 0) 
        {
            strncpy(uName, form->nameval[i].value, MAX_MAIL_SERVER_ACCOUNT_LEN - 1);
            uName[MAX_MAIL_SERVER_ACCOUNT_LEN - 1] = '\0';
        }
        else if (strcmp(form->nameval[i].name, "dPassword") == 0) 
        {
            strncpy(psswd, form->nameval[i].value, MAX_MAIL_SERVER_PASSWORD_LEN - 1);
            psswd[MAX_MAIL_SERVER_PASSWORD_LEN - 1] = '\0';
        }
        else if (strcmp(form->nameval[i].name, "RcptAddr1") == 0) 
        {
            strncpy(recAdd1, form->nameval[i].value, MAX_MAIL_SERVER_NAME_LEN - 1);
            recAdd1[MAX_MAIL_SERVER_NAME_LEN - 1] = '\0';
        }
        else if (strcmp(form->nameval[i].name, "RcptAddr2") == 0) 
        {
            strncpy(recAdd2, form->nameval[i].value, MAX_MAIL_SERVER_NAME_LEN - 1);
            recAdd2[MAX_MAIL_SERVER_NAME_LEN - 1] = '\0';
        }
        else if (strcmp(form->nameval[i].name, "RcptAddr3") == 0) 
        {
            strncpy(recAdd3, form->nameval[i].value, MAX_MAIL_SERVER_NAME_LEN - 1);
            recAdd3[MAX_MAIL_SERVER_NAME_LEN - 1] = '\0';
        }
        else if (strcmp(form->nameval[i].name, "RcptAddr4") == 0) 
        {
            strncpy(recAdd4, form->nameval[i].value, MAX_MAIL_SERVER_NAME_LEN - 1);
            recAdd4[MAX_MAIL_SERVER_NAME_LEN - 1] = '\0';
        }
    }

#if 0 /* [20130812][simonhuang] in the setting stage, we won't resolve the SMTP server here */
    if (gethostbyname(servAdd) == NULL)
    {
        if (servAdd[0] != '\0')    
        {
            syslog(LOG_ERR, "Fail to resolve the SMTP Server, %s\n", servAdd);
            printmsg("Fail to resolve the SMTP Server, perhaps the DNS has something wrong");
            return;
        }
    }
#endif
    
    U_FlshSmtpSetServer((Tuint8 *)servAdd);
    U_FlshSmtpSetSendAdd((Tuint8 *)sendAdd);
    U_FlshSmtpSetSubject((Tuint8 *)mSubject);
    U_FlshSmtpSetUnamePwd(bAuthEnable, (Tuint8 *)uName, (Tuint8 *)psswd);
    U_FlshSmtpSetRecAdd((Tuint8 *)recAdd1, (Tuint8 *)recAdd2, (Tuint8 *)recAdd3, (Tuint8 *)recAdd4);
    
    U_SysSetRelayConfig();
    
    get_AlarmLogSmtpSetting();
}


void post_AlarmLogSendTestEmail(struct httpform *form)
{
    char        servAdd[MAX_MAIL_SERVER_NAME_LEN];
    char        tmp_email[256];
    char        sendAdd[MAX_MAIL_SERVER_NAME_LEN];
    char        recAdd1[MAX_MAIL_SERVER_NAME_LEN];
    char        recAdd2[MAX_MAIL_SERVER_NAME_LEN];
    char        recAdd3[MAX_MAIL_SERVER_NAME_LEN];
    char        recAdd4[MAX_MAIL_SERVER_NAME_LEN];
    
    servAdd[0] = '\0';
    U_FlshSmtpGetServer((Tuint8*)servAdd, sizeof(servAdd));
    if (gethostbyname(servAdd) == NULL)
    {
        if (servAdd[0] != '\0')    
        {
            syslog(LOG_ERR, "Fail to resolve the SMTP Server, %s\n", servAdd);
            printmsg("Fail to resolve the SMTP Server, perhaps the DNS has something wrong");
            return;
        }
    }
    
    U_FlshSmtpGetRecAdd((Tuint8 *)recAdd1, (Tuint8 *)recAdd2, (Tuint8 *)recAdd3, (Tuint8 *)recAdd4);
    U_FlshSmtpGetSendAdd((Tuint8 *)sendAdd, sizeof(sendAdd));
    tmp_email[0] = '\0';
    sprintf(tmp_email, "%s %s %s %s", recAdd1, recAdd2, recAdd3, recAdd4);
    sendMail(tmp_email, sendAdd, "Send Test E-mail", 0, 1, NULL, NULL);
    
    get_AlarmLogSmtpSetting();

    return;
}


void post_AlarmLogClearAllLog(struct httpform *form)
{
    
    clear_relay_log();
    
    get_AlarmLogLog();
    return;
}


void post_AlarmLogClrRelyAlarm (struct httpform *form)
{
    char tmp[32];
    
    U_SysSetRelayClear();
    
    sprintf(tmp, "echo 0 > /tmp/do");
    system(tmp);

    //get_AlarmLogSetting();
    get_AlarmLogLog();
    return;
}


void post_AlarmLogTestRelay (struct httpform *form)
{
    U_SysSetRelaySet();

    relayAsserted = 1;

    get_AlarmLogSetting();

    return;
}


void post_AlarmLogResetRelay (struct httpform *form)
{
    U_SysSetRelayClear();

    relayAsserted = 0;

    get_AlarmLogSetting();

    return;
}


#if defined(EH6520)
void post_alarmledclear (struct httpform *form)
{
    U_AlarmSetOnOff(0);
    get_AlarmLogLog();
    return;
}
#endif

